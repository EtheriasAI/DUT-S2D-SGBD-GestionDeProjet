CREATE OR REPLACE PACKAGE PACK_PROJECT IS
    FUNCTION PROJETEFFECTIF(IdProj INTEGER) RETURN NUMBER;
    PROCEDURE MODIFIERADHERENTS (IdProj NUMBER, Nbre NUMBER);
    PROCEDURE NOUVELLEADHESION (IdProspect INTEGER, IdProj INTEGER);
    PROCEDURE SEMINAIREPRESENCE (Idsemi INTEGER);
    PROCEDURE PRESENCEPROJETSEMAIRE (IdProj INTEGER);
    PROCEDURE AFFICHEPROJET;
END;
/

CREATE OR REPLACE PACKAGE BODY PACK_PROJECT AS

    FUNCTION PROJETEFFECTIF(IdProj INTEGER) RETURN NUMBER
    IS
    Effectif NUMBER;
    BEGIN
        SELECT COUNT(Id_Pro) INTO Effectif
        FROM Adhérer
        WHERE Id_Pro = IdProjet;
    RETURN Effectif;
    END PROJETEFFECTIF;
    
    PROCEDURE MODIFIERADHERENTS (IdProj NUMBER, Nbre NUMBER)
    IS

    BEGIN
    
    END MODIFIERADHERENTS;
    
    PROCEDURE NOUVELLEADHESION (IdProspect INTEGER, IdProj INTEGER)
    IS
        NOMBRE NUMBER;
    BEGIN
        SELECT NBAdherent into NOMBRE FROM Projet WHERE Id_Projet=IdProj;
        IF NOMBRE > 20 THEN
            INSERT INTO PROJET (Id_Projet, Id_Pro) VALUES (IdProj, IIdProspect);
        else
            RAISE_APPLICATION_ERROR(-20420,' l’ajout ne sera pas réalisé');
        END IF;
    END NOUVELLEADHESION;
    
    PROCEDURE SEMINAIREPRESENCE (IdSemi INTEGER)
    IS

    BEGIN
    
    END SEMINAIREPRESENCE;
       
    PROCEDURE PRESENCEPROJETSEMINAIRE (IdProj INT)
    IS
    
    BEGIN
       
    END PRESENCEPROJETSEMINAIRE;

    PROCEDURE AFFICHEPROJET
    IS
    CURSOR C1 is SELECT NBAdherent, Libelle_Projet FROM Projet 
    BEGIN
        FOR A in C1
        LOOP
        DBMS_OUTPUT.PUT_LINE ('Effectif: '||A.NBAdherent||'adhérent est dans le projet'||A.Libelle_Projet);
        END LOOP;
    END AFFICHEPROJET;  
END;
/